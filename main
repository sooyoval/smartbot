import random
import json
import nltk
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import HashingVectorizer

# для чтения:
with open('/content/BOT_CONFIG_13072021_2.json', 'r') as f:
  BOT_CONFIG = json.load(f)
# BOT_CONFIG

# делаем систему сравнения более мягкой (знаки, капс) не учитываются
def clean(text):
  text = text.lower()
  cleaned_text = ''
  for ch in text:
    if ch in 'абвгдеёжзийклмнопрстуфхцчшщъыьэюя':
      cleaned_text = cleaned_text + ch
  return cleaned_text
  
  # можем определять интент
def get_intent(text):
  for intent in BOT_CONFIG['intents'].keys(): 
   for example in BOT_CONFIG['intents'][intent]['examples']:
     # условный оператор if
     if nltk.edit_distance(clean(example), clean(text)) / max(len(clean(example)), len(clean(text))) * 100 < 40:
       return intent
  return 'unknown_intent'

# начинаем обучение модели

X = []
y = []
for intent in BOT_CONFIG['intents']: 
  for example in BOT_CONFIG['intents'][intent]['examples']:
    X.append(example) # будет добавлять 
    y.append(intent)
    
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.67, random_state=42)

# займемся векторизацией
# создаем вектора длины словаря нашей коллекции текста
# в каждой колонке стоит кол-во раз сколько слова встретилось в строке
from sklearn.feature_extraction.text import HashingVectorizer

vectorizer = HashingVectorizer(analyzer='char', ngram_range=(1,3), preprocessor=clean)
X_train_vectorized = vectorizer.fit_transform(X_train)
X_test_vectorized = vectorizer.transform(X_test)

# выбор классификатора

from sklearn.linear_model import RidgeClassifier

clf = RidgeClassifier() 
clf.fit(X_train_vectorized, y_train)
clf.score(X_train_vectorized, y_train), clf.score(X_test_vectorized, y_test)

# модель для предсказания интент
def get_intent_by_model(text):
  vectorized_text = vectorizer.transform([text])
  return clf.predict(vectorized_text)[0]
  
  # функция которая принимает текст и определять интент текста
# + нужны условные операторы для интента
def bot(text):
  intent = get_intent_by_model(text)

  # if intent == 'unknown_intent':
  #   return random.choice(BOT_CONFIG['default'])
  # else:
  return random.choice(BOT_CONFIG['intents'][intent]['responses'])
  
  # подключение телеграм бота - сначала надо откоментировать - потом обновить и закоментить 
# и заново все запустить :)

!pip install python-telegram-bot --upgrade

# подключаем бота в тг и теститурем

import logging

from telegram import Update, ForceReply
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)

logger = logging.getLogger(__name__)


# Define a few command handlers. These usually take the two arguments update and
# context.
def start(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /start is issued."""
    user = update.effective_user
    update.message.reply_markdown_v2(
        fr'Hi {user.mention_markdown_v2()}\!',
        reply_markup=ForceReply(selective=True),
    )


def help_command(update: Update, context: CallbackContext) -> None:
    """Send a message when the command /help is issued."""
    update.message.reply_text('Help!')


def echo(update: Update, context: CallbackContext) -> None:
    """Echo the user message."""
    update.message.reply_text(bot(clean(update.message.text)))


def main() -> None:
    """Start the bot."""
    # Create the Updater and pass it your bot's token.
    updater = Updater('1740182387:AAGB6Ck5webSmujpIX_UXwewGLpnDIuJ0LU')

    # Get the dispatcher to register handlers
    dispatcher = updater.dispatcher

    # # on different commands - answer in Telegram
    dispatcher.add_handler(CommandHandler('start', start))
    dispatcher.add_handler(CommandHandler('help', help_command))

    # on non command i.e message - echo the message on Telegram
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()
    
    main()
    
